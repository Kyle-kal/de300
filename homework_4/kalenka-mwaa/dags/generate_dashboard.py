# -*- coding: utf-8 -*-
"""generate_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZpyPZmw49OyCJsdwIxtwO_Mp2yvAoMaA
"""

from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import pytz

import boto3
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io

S3_BUCKET = "kalenka-mwaa"
S3_PREFIX = "weather_data/"
OUTPUT_PREFIX = "output_graphs/"
central = pytz.timezone("US/Central")

def generate_dashboard_for_date(target_date, suffix):
    s3 = boto3.client("s3")
    response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix=S3_PREFIX)
    objects = response.get('Contents', [])

    all_dfs = []

    for obj in objects:
        key = obj["Key"]
        if key.endswith(".csv"):
            obj_data = s3.get_object(Bucket=S3_BUCKET, Key=key)
            df = pd.read_csv(io.BytesIO(obj_data['Body'].read()))
            df["timestamp"] = pd.to_datetime(df["timestamp"])
            df["date"] = df["timestamp"].dt.date
            df = df[df["date"] == target_date]
            if not df.empty:
                all_dfs.append(df)

    if not all_dfs:
        print(f"No data found for {target_date}.")
        return

    full_df = pd.concat(all_dfs)
    metrics = ["temperature", "visibility", "relativeHumidity"]

    for metric in metrics:
        plt.figure(figsize=(12, 6))
        for station in full_df["station"].unique():
            station_df = full_df[full_df["station"] == station]
            times = station_df["timestamp"]
            plt.plot(times, station_df[metric], label=station)

        start_time = full_df["timestamp"].min().strftime('%H:%M')
        end_time = full_df["timestamp"].max().strftime('%H:%M')
        plt.title(f"{metric} on {target_date} ({start_time} to {end_time} Central Time)")
        plt.xlabel("Time (HH:MM)")
        plt.ylabel(metric)
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
        plt.xticks(rotation=45)
        plt.legend()
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)

        plot_key = f"{OUTPUT_PREFIX}{metric}_{suffix}.png"
        s3.put_object(Bucket=S3_BUCKET, Key=plot_key, Body=buf.getvalue())
        buf.close()
        plt.close()

def generate_dashboard(**kwargs):
    execution_date = datetime.strptime(kwargs['ds'], '%Y-%m-%d').date()
    target_date = execution_date - timedelta(days=1)
    suffix = target_date.strftime('%Y%m%d')
    generate_dashboard_for_date(target_date, suffix)

# DAG Setup
default_args = {
    'owner': 'kalenka',
    'start_date': datetime(2025, 6, 6),
    'retries': 1
}

dag = DAG(
    'daily_weather_dashboard',
    default_args=default_args,
    description='Generate weather dashboard daily at midnight for the previous day',
    schedule_interval=timedelta(days=1),
    catchup=True,
    tags=["de300"]
)

generate_dashboard_task = PythonOperator(
    task_id='generate_dashboard',
    python_callable=generate_dashboard,
    provide_context=True,
    dag=dag
)